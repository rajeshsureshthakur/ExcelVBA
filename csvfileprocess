import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;

public class URLPatternAggregator {
    public static class AggregationResult {
        private final String originalPattern;
        private final String replacementPattern;
        private final double sum;
        private final int count;
        private final Set<String> uniqueIds;
        private final Set<String> uniquePaths;

        public AggregationResult(String originalPattern, String replacementPattern, double sum, int count, 
                               Set<String> uniqueIds, Set<String> uniquePaths) {
            this.originalPattern = originalPattern;
            this.replacementPattern = replacementPattern;
            this.sum = sum;
            this.count = count;
            this.uniqueIds = uniqueIds;
            this.uniquePaths = uniquePaths;
        }

        @Override
        public String toString() {
            return String.format("Pattern: %s -> %s, Sum: %.2f, Count: %d, Unique IDs: %s, Paths: %s", 
                originalPattern, replacementPattern, sum, count, uniqueIds, uniquePaths);
        }
    }

    public static class PatternMatcher {
        private final Pattern pattern;
        private final String replacement;
        private final boolean hasExtendedPath;

        public PatternMatcher(String regex, String replacement, boolean hasExtendedPath) {
            this.pattern = Pattern.compile(regex);
            this.replacement = replacement;
            this.hasExtendedPath = hasExtendedPath;
        }

        public boolean matches(String input) {
            return pattern.matcher(input).matches();
        }

        public MatchResult extractComponents(String input) {
            Matcher matcher = pattern.matcher(input);
            if (matcher.matches()) {
                String id = matcher.group(1);
                String extendedPath = hasExtendedPath && matcher.groupCount() > 1 ? matcher.group(2) : "";
                String basePath = input.substring(0, input.indexOf(id));
                return new MatchResult(basePath, id, extendedPath);
            }
            return null;
        }

        public String getReplacement(String basePath, String extendedPath) {
            return basePath + replacement + (extendedPath.isEmpty() ? "" : "/" + extendedPath);
        }
    }

    public static class MatchResult {
        public final String basePath;
        public final String id;
        public final String extendedPath;

        public MatchResult(String basePath, String id, String extendedPath) {
            this.basePath = basePath;
            this.id = id;
            this.extendedPath = extendedPath;
        }
    }

    public static Map<String, AggregationResult> processCSVFile(String inputFile, String outputFile) throws IOException {
        // Define pattern matchers for different URL patterns
        List<PatternMatcher> patterns = Arrays.asList(
            // Pattern for URLs with additional path after ID
            new PatternMatcher(
                "/api/ui/report-part-fine/play/([a-zA-Z0-9]+)/([a-zA-Z0-9-/]+)$",
                "<Common>",
                true
            ),
            // Pattern for URLs ending with ID
            new PatternMatcher(
                "/api/ui/report-part-fine/play/([a-zA-Z0-9]+)$",
                "<Common>",
                false
            ),
            // Pattern for schedule URLs with extended path
            new PatternMatcher(
                "/api/ui/report-task-ok/schedule/([a-zA-Z0-9]+)/([a-zA-Z0-9-/]+)$",
                "<Common>",
                true
            ),
            // Pattern for schedule URLs ending with ID
            new PatternMatcher(
                "/api/ui/report-task-ok/schedule/([a-zA-Z0-9]+)$",
                "<Common>",
                false
            ),
            // Generic catch-all pattern with extended path
            new PatternMatcher(
                "/api/ui/([a-zA-Z0-9-]+/)*([a-zA-Z0-9]+)/([a-zA-Z0-9-/]+)$",
                "<Common>",
                true
            )
        );

        Map<String, AggregationResult> results = new HashMap<>();

        // Read and process input file
        List<String> lines = Files.readAllLines(Paths.get(inputFile));
        boolean isFirstLine = true;

        for (String line : lines) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }

            String[] parts = line.split(",", 2);
            if (parts.length != 2) continue;

            String url = parts[0].trim();
            double number;
            try {
                number = Double.parseDouble(parts[1].trim());
            } catch (NumberFormatException e) {
                System.err.println("Invalid number format in line: " + line);
                continue;
            }

            // Try each pattern matcher
            for (PatternMatcher matcher : patterns) {
                if (matcher.matches(url)) {
                    MatchResult match = matcher.extractComponents(url);
                    if (match == null) continue;

                    String replacementPattern = matcher.getReplacement(match.basePath, match.extendedPath);
                    String groupKey = match.basePath + (match.extendedPath.isEmpty() ? "" : "/" + match.extendedPath);

                    // Update aggregation results
                    results.merge(groupKey,
                        new AggregationResult(url, replacementPattern, number, 1, 
                            new HashSet<>(Arrays.asList(match.id)),
                            new HashSet<>(Arrays.asList(match.extendedPath))),
                        (existing, newValue) -> new AggregationResult(
                            existing.originalPattern,
                            existing.replacementPattern,
                            existing.sum + number,
                            existing.count + 1,
                            new HashSet<String>() {{
                                addAll(existing.uniqueIds);
                                addAll(newValue.uniqueIds);
                            }},
                            new HashSet<String>() {{
                                addAll(existing.uniquePaths);
                                addAll(newValue.uniquePaths);
                            }}
                        ));
                    break;
                }
            }
        }

        // Write results to output file
        writeResults(outputFile, results);

        return results;
    }

    private static void writeResults(String outputFile, Map<String, AggregationResult> results) throws IOException {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(outputFile))) {
            // Write header
            writer.write("Base Pattern,Replacement Pattern,Sum,Count,Unique IDs,Extended Paths\n");

            // Write each aggregated result
            for (AggregationResult result : results.values()) {
                writer.write(String.format("%s,%s,%.2f,%d,%s,%s\n",
                    escapeCsvField(result.originalPattern),
                    escapeCsvField(result.replacementPattern),
                    result.sum,
                    result.count,
                    escapeCsvField(String.join(", ", result.uniqueIds)),
                    escapeCsvField(String.join(", ", result.uniquePaths))
                ));
            }

            // Write totals
            double totalSum = results.values().stream()
                .mapToDouble(r -> r.sum)
                .sum();
            int totalCount = results.values().stream()
                .mapToInt(r -> r.count)
                .sum();
            writer.write(String.format("\nTotals,,%,.2f,%d,,\n", totalSum, totalCount));
        }
    }

    private static String escapeCsvField(String field) {
        if (field.contains(",") || field.contains("\"") || field.contains("\n")) {
            return "\"" + field.replace("\"", "\"\"") + "\"";
        }
        return field;
    }

    public static void main(String[] args) {
        try {
            // Example usage
            String inputFile = "input.csv";
            String outputFile = "aggregated_output.csv";
            
            // Create sample input file for demonstration
            createSampleInputFile(inputFile);
            
            // Process the file
            Map<String, AggregationResult> results = processCSVFile(inputFile, outputFile);
            
            // Print results to console
            System.out.println("Aggregation Results:");
            results.values().forEach(System.out::println);
            
            System.out.println("\nProcessing complete. Check " + outputFile + " for detailed results.");
            
        } catch (IOException e) {
            System.err.println("Error processing files: " + e.getMessage());
        }
    }

    // Helper method to create sample input file
    private static void createSampleInputFile(String filename) throws IOException {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(filename))) {
            writer.write("URL,Number\n");
            writer.write("/api/ui/report-part-fine/play/1456ab21323df/time,100.50\n");
            writer.write("/api/ui/report-part-fine/play/789xyz123,75.25\n");
            writer.write("/api/ui/report-part-fine/play/456def789/details,200.75\n");
            writer.write("/api/ui/report-task-ok/schedule/123abc456/status,150.00\n");
            writer.write("/api/ui/report-part-fine/play/999zzz888/time,125.50\n");
        }
    }
}
